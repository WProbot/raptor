#!/usr/bin/env bash

### ############################################################################

### initialize script with standard synthia bootstrapping block.

### ############################################################################

#### 1 | add padding to output / clear screen.

### ############################################################################

### evaluate arguments.

### ############################################################################

if [ "${custom_output-null}" = "v" ]
then
    echo "Printing verbose output as per | -o v |."
    echo
    set -x
fi

if [[ "${@#--return-check}" = "$@" ]]
then
    echo "This script must not be run directly."
    echo
    echo "You should instead run the | setup | script and it will take care of the installation itself."
    echo
    echo "Exiting..."
    echo
    exit 1
fi

### ############################################################################

### continue script initialization.

### ############################################################################

#### 2 | locate execution environment and perform synthia-bound operations.

#### ###########################################################################

##### set bash environment error management.

set -eu

##### determine script execution directory and install directory.

if [ -L "${BASH_SOURCE}" ]
then

    ###### this file is being executed via a symlink.
    ###### therefore identify the parent directory of the target file.

    link_target="$(readlink ${BASH_SOURCE})"
    exec_dir="${link_target%/*}"

else

    ###### this file is being directly executed.
    ###### therefore identify our parent directory.

    exec_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

fi

exec_dir_trim_2="$( echo ${exec_dir} | cut -f 1,2,3 -d'/')"
exec_dir_trim_3="$( echo ${exec_dir} | cut -f 1,2,3,4 -d'/')"

if [ -f "${exec_dir_trim_2}/functions" ]
then
	exec_dir_root="${exec_dir_trim_2}"
else
	if [ -f "${exec_dir_trim_3}/functions" ]
	then
		exec_dir_root="${exec_dir_trim_3}"
	else
		echo "Functions file not found in any second or third level parent directory of: | ${exec_dir} |."
		echo
		echo "Exiting..."
		echo
        exit 1
	fi
fi

##### source local functions file.

. "$exec_dir_root/functions"

##### define formatting.

synthia-define_formatting

##### check for root user runtime.

synthia-check_root

#### ###########################################################################

#### 3 | source dna and perform dna-bound operations.

#### ###########################################################################

##### ensure that the dna version required hasn't changed due to a new version
##### of this very project being installed.

if [ -z "${custom_dna_version-}" ]
then

    ## no custom dna version was requested upon running the setup script.
    ## let's check if an upgrade to the project itself has changed the required
    ## dna version.

    dna_selected_vers="$(cat "${os_base_dir}/dna/version_installed")"

    if [ "${dna_version}" != "${dna_selected_vers}" ]
    then

        echo "${l-}${b-}Now upgrading version of dna as required by the newly upgraded version of this very project which was just fetched...${x-}"
        echo

        synthia-download_dna

        echo

    fi

fi

##### source dna.

synthia-source_dna

##### define variables.

synthia-define_vars

##### read conf settings.

dna-read_conf_settings

##### touch temp dir.

dna-touch_tmp_project_dir

#### ###########################################################################

#### 4 | head/log script.

dna-log_script -i

### ############################################################################

### actually start script operations.

### ############################################################################

#### preflight checks.

#### ###########################################################################

##### check for any already existing installation.

dna-check_install_version

##### install repo contents into destination dir.

dna-echo_operation -h "installing repository contents into destination directory"

##### install rsync if it isn't yet [like in debian].

if ! dpkg -s rsync &> /dev/null
then
    dna-install_dependencies -p "rsync"
fi

##### proceed with rsync.

rsync -aAXx "${source_dir}/" "${install_dir}/" --include=tools*** --include=functions --exclude="*"

dna-link_tools

dna-echo_operation -t

#### ###########################################################################

#### proceed with installation.

#### ###########################################################################

if [ -z "${skip_full_installation-}" ]
then

    ##### echo install initialization.

    dna-echo -m "Initiating install..."

    ##### perform installation.

    synthia-perform_installation
    
fi

#### ###########################################################################

#### post-install.

#### ###########################################################################

##### mark installer as completed successfully.

touch "$source_dir/install_complete"

#### ###########################################################################

### ############################################################################
