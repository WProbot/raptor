#!/usr/bin/env bash

################################################################################

### Set bash environment error management

set -eu

### Add padding to output

echo

### Determine script execution directory, install directory, and source local functions file

exec_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

exec_dir_trim_2="$( echo ${exec_dir} | cut -f 1,2,3 -d'/')"
exec_dir_trim_3="$( echo ${exec_dir} | cut -f 1,2,3,4 -d'/')"

if [ -f "${exec_dir_trim_2}/functions" ]
then
	exec_dir_root="${exec_dir_trim_2}"
else
	if [ -f "${exec_dir_trim_3}/functions" ]
	then
		exec_dir_root="${exec_dir_trim_3}"
	else
		echo "Functions file not found in any second or third level parent directory of: | $exec_dir |"
		echo
        exit 1
	fi
fi

. "$exec_dir_root/functions"

### Source openspace functions file

source_os_functions

### Define formatting

os-define_formatting

### Define variables

define_vars

################################################################################

check_root

### Get arguments to pass onto the installer

while getopts ":be" arguments; do
    case $arguments in
        b)	export bleeding_edge_bf="-b"
        echo "Using bleeding-edge bash-functions as per | -b |."
        echo
        ;;
        e)	export bleeding_edge_rc="-e"
        echo "Using bleeding-edge repo code as per | -e |."
        echo
        ;;
        \?)	echo "Invalid option | -$OPTARG | for function | ${FUNCNAME[0]} |."
        echo
        exit
        ;;
    esac
done

OPTIND=1

################################################################################

### Clone and upgrade

cd

if [ -d "./${proj_name}/" ]
then
        rm -r "${proj_name}/"
fi

git clone https://github.com/${author_name}/${proj_name}
bash ${proj_name}/setup ${bleeding_edge_bf-} ${bleeding_edge_rc-}
